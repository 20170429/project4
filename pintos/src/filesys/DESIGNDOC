       		     +-------------------------+
		     |	       EE 415	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Seokbum Yoon <jing9044@kaist.ac.kr>
Geonho Kim   <kgh0720kgh@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

Extra credit을 위해 dentry cache를 구현하였으며 이를 위해 test case에 lg-tree를 추가하였습니다.
dentry cache를 구현하기 전과 구현한 후의 lg-tree에서의 performance 차이를 src/filesys에 있는 dentrycache.png에 명시하였습니다.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

1. struct inode_disk 수정

1) block_sector_t start와 uint32_t unused[125]를 제거.
2) block_sector_t direct_map_table[DIRECT_BLOCK_ENTRIES] 추가
: direct하게 data block의 sector index를 저장하는 table. 512byte를 맞추기 위해 123개의 entry로 구성.
3) block_sector_t indirect_block_sec 추가
: data block의 sector index들을 저장하는 index block의 sector index
4) block_sector_t double_indirect_block_sec 추가
: index block들의 sector index들을 저장하는 2차 index block의 sector index.

2. struct inode 수정

1) struct inode_disk data 제거.
2) struct lock extend_lock 추가
: race condition 방지를 위함.

3. enum direct_t 추가 : NORMAL_DIRECT, INDIRECT, DOUBLE_INDIRECT, OUT_LIMIT로 구성.

4. struct sector_location 추가

1) enum direct_t directness
: data block이 어떤 식으로 mapping 되어있는지를 나타낸다.
2) off_t index1
: NORMAL_DIRECT, INDIRECT의 경우, map table의 index
3) off_t index2
: DOUBLE_INDIRECT의 map table index

5. struct inode_indirect_block 추가

1) block_sector_t map_table[INDIRECT_BLOCK_ENTRIES]
: INDIRECT, DOUBLE_INDIRECT에서 사용하는 index block, 512byte를 맞추기 위해 128개의 entry로 구성.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

NORMAL_DIRECT -> 123 blocks
INDIRECT -> 128 blocks
DOUBLE_INDIREC -> 128 * 128 = 16384 blocks

(123 + 128 + 16384) * 512 bytes = 8,517,120 bytes = 8.123 MB

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

struct inode에 추가한 extend lock을 활용하여 race condition을 방지하였다. inode_write_at에서 file이 extend가 되는 경우가 발생할 수 있는데,
해당 상황에 extend lock을 acquire, release하여 문제가 생기지 않도록 하였다.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

file extension이 발생하는 동안은 file access를 막아놓았기에 writing이 먼저 일어나게 되면 추가된 부분을 볼 수 
있고, reading이 먼저 일어나면 볼 수 없도록 구성되었다.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

reading과 writing을 각각 요청할 때 둘 사이에 권한의 차이가 없도록 만들어졌기에 shceudling을 통해 fairly하게 각 process가 요청한 작업을 수행할 수 있도록 구현하였다.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

multilevel index를 활용한 inode structure를 구현하였다. 

index block을 여러개 활용하면 더 큰 file을 관리할 수 있는 장점이 있다. 하지만 이는 disk 접근 횟수를 늘리기 때문에 
전체적인 performance에 악영향을 줄 수 있다. 따라서 작은 file에 접근할 때도 속도가 느려질 수 있다.

하지만 direct, indirect, doubly indirect를 함께 사용하게 되면, 작은 file의 경우 direct만 활용하여 비교적 적은 I/O로 
file 처리가 가능하며, 적당히 큰 file까지 모두 처리할 수 있게 된다.

따라서 우리는 범용성과 효율의 절충안으로써 multilevel indexing과 direct, indirect, doubly indirect를 함께 사용하였다.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

1. struct inode_disk 수정

1) int is_dir 추가
: 해당 file이 일반 file이면 0, directory이면 1의 값을 취한다.

2. struct thread 수정

1) struct dir *dir 추가
: thread가 작업중인 directory를 나타낸다.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

우선 path를 '/' 단위로 분할하여 분석한다. 만약 absolute path일 경우, traversing의 시작점을 root directory로 설정하고,
relative path일 경우, 시작점을 현재 thread의 작업 directory로 설정한다. 이후 분석한 path에 맞게 traversing을 진행한다.

추가적으로 absolute path의 경우 absolute path에 대응되는 inumber를 기록하는 hash table인 dentry_cache를 구현하여 cache hit가
발생할 경우 path를 전부 traversing 하지 않아도 되도록 하였다. 

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

directory가 block에 access를 요청하는 것은 결국 inode에 의해 이루어지는데, C6에서 기술하였듯이 
이 inode는 모든 process가 공유하는 자원이기에 이 inode 내 lock을 이용하여 race를 방지하였다.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

현재 작업 중인 directory를 삭제할 수 있도록 구현하였다. 그러한 경우에는 thread_current의 dir을 NULL로 설정하여 
제거된 directory에서 추가적인 작업을 하지 못하도록 설정했으며, chdir system call이 발생하는 것을 기다리도록 구현했다.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

앞서 언급했듯이 struct thread에 dir을 추가하는 방식으로 현재의 directory를 나타내도록 하였다.
이 방식을 활용하면 thread_current ()->dir을 통해 현재의 directory에 쉽게 접근할 수 있어
relative path traversing이나 chdir에서 편리하게 작업을 진행할 수 있다.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct buffer_head
{
    struct inode* inode;    buffer_head마다 대응되는 inode가 있음. 
    bool dirty;             cache에 data가 쓰여지면 dirty 상태가 됨.
    bool used;              사용중인 cache entry를 표시
    struct lock lock;       synchronization을 위한 lock
    block_sector_t sector;  buffer_head마다 대응되는 sector
    int clock_bit;          clock algorithm을 위한 parameter
    void* data;             data pointer
};

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

clock_hand라는 global variable이 64개의 entry마다 clock_bit를 확인한다. 
clock_bit가 0이면 그 해당 entry를 evict하고, 그렇지 않으면 clock_bit를 0으로 설정하고 계속 탐색한다. 
결국 한 cycle안에 무조건 evict될 entry를 찾을 수 있다.

>> C3: Describe your implementation of write-behind.

write 요청이 들어올 시 해당 sector의 cache가 존재하면 cache data에 우선 write하고 disk에는 기록하지 않도록 구현하였다. 
이후 period라는 global variable을 정의하여 bc_read bc_write가 실행될 때마다 count되도록 하여 특정 값 이상이 되면
dirty cache entry를 disk에 flush하는 write_behind 함수가 실행되도록 하였다.

>> C4: Describe your implementation of read-ahead.

read-ahead를 구현하지 않았으나 해당 사항을 구현하게 된다면 다음 block의 cache가 미리 형성되어 performance가 더 향상될 것으로 보인다.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

victim selection 시 victim으로 선정된 buffer_head가 lock acquire를 시도한다. block read 또는 write 시마다
lock acquire를 하도록 구현하였으므로 이 victim이 acquire에 바로 성공하면 reading이나 writing이 일어나지 않고 있다는 것이고, 
바로 성공하지 못하면 reading이나 writing이 완료될 때까지 기다리게 되므로 현재 작업중인 data의 cache가 evict될 일이 없다.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

inode.c 내 함수 중 bc_read bc_write를 호출하는 함수들에 대해서 inode가 함수 진입 시 lock을 설정하고 완료 시 해제하도록 하였다. 
inode는 sector마다 고유하게 존재하여 inode_list에 의해 관리되므로 다른 process가 동일한 sector에 접근을 요청하여
inode를 사용하려는 것을 대기하도록 할 수 있다.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

파일의 workoload가 많을수록 반복된 block의 사용 빈도도 늘어날 것이며 이는 buffer caching이 가져다줄 효과가 극대화됨을 의미한다. 
마찬가지로 read-ahead는 data access가 연속적으로 이루어질 수 있도록 하므로 이로 인한 benefit이 커질 것이다.
write behind 역시 주기적으로 dirty entry를 flush하도록 managing 해주면 disk에 직접 write하는 횟수를 줄여 performance가 좋아질 것이다.

